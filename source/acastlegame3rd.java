/* autogenerated by Processing revision 1289 on 2023-01-13 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class acastlegame3rd extends PApplet {


// Declare and initialize global variables
PImage backGround; //Load background image grass
int bgX = 0;
int level=1; //Makes level and sets it to 1
int highscore; //Makes highscore a variable
int score = 0; //Makes score an integer and start at zero
int gameScreenNum=0;//Set game screen to 0 which is the start game, screen 1 will be the gamescreen then last would be screen 2
int gameOver=0;//Ints gameover screen
int healthBarWidth = 100;
int maxHealth = 250;
float health = 250;
float healthDecrease = 1;
float mSpeed=3;//Speed of monster
float bSpeed=6;//Speed of bomb monster
PrintWriter scores;//Use to write score

//Declare and initialize objects
Castle castle = new Castle();
Knight knight = new Knight();
PMonster[] monster= new PMonster[5];

public void setup() {
  /* size commented out by preprocessor */; //size of the screen
  for (int i = 0; i < 5; i++) {
    if (i<3) {
      monster[i]=new Monster();//Load in array of regular monsters
    } else {
      monster[i]=new Bomb();//Load in array of bomb monsters
    }
  }
  String[] Scores=loadStrings("HIGHSCORE.txt");//loads the textfile with the name HIGHSCORE
  highscore=PApplet.parseInt(Scores[0]);
  backGround = loadImage("grass.jpg");//Loads the grass background
  backGround.resize(width, height);//makes the background big enough for the game screen which is 800x800
  castle.x = 400;
  castle.y = 400;
  for (int i = 0; i < 5; i++) {
    monster[i].reset();//Resets all monsters
  }
}

public void draw() {  // Display the contents of the current screens
  if (gameScreenNum == 0) {//Press to start screen
    initScreen();//initalize screen
  } else if (gameScreenNum == 1) {//This will draw the main game screen
    gameScreen();
    for (int i = 0; i < 5; i++) {
      if (i<3) {
        monster[i].Monstermove(mSpeed);//Makes monsters move and sets speed of the monsters
      } else {
        monster[i].Monstermove(bSpeed);//Makes bomb monster move and sets speed of the bomb monsters
      }
    }
  } else if (gameScreenNum == 2) {//Calls the game over screen
    gameOverScreen();
  }
}

public void initScreen() {
  background(0, 30, 30);//Creates a background for the menu screen
  textAlign(CENTER);//Centers text
  fill(255, 0, 50);//Makes the text a red colour
  textSize(70);//Size of text
  text("Protect Your Castle", width/2, height/2);//Centers the texts because of height and width over 2
  textSize(15);
  text("Press any key to start", width/2, height-30);//Centers text then the - 30 makes it slightly higher
}

public void gameScreen() {
  image(backGround, bgX, 0);//Draws grass in background
  castle.run();
  knight.run();
  knight.Kupdate();// Update the knight's position
  damage();//Damage of the monsters when on castle
  levels();
  for (int i = 0; i < 5; i++) {//Draws monster animations both monsters and bomb monsters
    monster[i].run();
  }
  for (int i = 3; i < 5; i++) {
    monster[i].explosions(); //Draws animations for bomb monster explosions
  }
  if (gameScreenNum==1)//Draws health, score, level when game is started
    drawStats();

  }

public void gameOverScreen() {//What displays during the game over screen
  background(0, 30, 30);
  if (score<highscore) {//If score is less than highscore
    textSize(30);
    text("YOUR SCORE: "+score, width/2, height/2); //display score
    textSize(20);
    text("HIGHEST SCORE: "+highscore, width/2, height/2 - 50);//display last highscore
  }
  if (score>highscore) {//If score is higher than highscore than save score as highscore
    scores = createWriter("HIGHSCORE.txt");//save into textfile named highscore
    scores.println(score);
    scores.close();//saves and closes file
    gameOver=1;
    textSize(30);
    text("NEW HIGHSCORE: "+score, width/2, height/2);//Displays current score which will be saved over as highscore
    textSize(20);
    text("PREVIOUS HIGHSCORE: "+highscore, width/2, height/2-50 );//Shows the previous highscore
  }
  textSize(15);
  text("Press any key to restart", width/2, height-30);//Centers text then the - 30 makes it slightly higher
  gameOver=1;
    mSpeed=3;//restarts speeds and levels
    bSpeed=6;
    level=1;
}

public void drawStats() {//score,healthbar,levels
  fill(255, 255, 255);
  textSize(25);
  text("SCORE: "+score, 60, 30);// Draws the score
  text("LEVEL: "+level, 60, 790);//Draws level
  textSize(15);
  text(health, 700, 50);//Shows value of health rather than just the health bar
  rectMode(CORNER);
  fill(200, 200, 200);//Bar behind health so you can see whether health has decreased
  rect(700-(healthBarWidth/2), 50 - 30, healthBarWidth, 10);
  if (health > (maxHealth/2)) { //When health exceeds 50 percent then the colour will change to orange
    fill(46, 204, 113);
  } else if (health > (maxHealth/2.5f)) { //When the health goes bellow health over 2.5 then the colour will start changing to a more red tone
    fill(230, 126, 34);
  } else {
    fill(255, 76, 60);//Fills bar red
  }
  rectMode(CORNER);
  rect(700-(healthBarWidth/2), 50 - 30, healthBarWidth*(health/maxHealth), 10);//The outer bar
}

// Check if the knight has reached the monster
public void mousePressed() {
  for (int i = 0; i < 3; i++) {
    if (dist(knight.x, knight.y, monster[i].x, monster[i].y) < 30) { //If the knight is touching the monster and the mouse is pressed within 25 pixels distance then
      monster[i].reset();//Reset monster
      score++;//Increase the score by one
    }
  }
}

public void decreaseHealth() {//Loss of health
  health=health-healthDecrease;
  if ( health<= 0) {
    gameScreenNum = 2;//If the health is less than 0 then game ends and goes to gameScreenNum
  }
}

public void damage() { //Checks whether monster has reached castle then monster does damage to castle
  for (int i = 0; i < 3; i++) {
    if (monster[i].y < 54 && (monster[i].x >= (castle.x-200) && monster[i].x <= (castle.x-200+400)))
    {
      decreaseHealth();//Decrease health and when health is bellow 0 the game ends
    }
  }
}

public void restart() { //Resets the score, health back to 0 and enemy objects
  score = 0;
  health = maxHealth;
  gameScreenNum = 1;
  for (int i = 0; i < 5; i++) {
    monster[i].reset();
  }
}

public void levels(){
  if (score>10) {
    mSpeed=4; // When score exceeds 10 the speed of monster increases This will count as level 2
    level=2;
  }
  if (score>30) {
    mSpeed=5; // When score exceeds 30 the speed of monster increases This will count as level 3
    level=3;
  }
  if (score>50) {
    mSpeed=6;  //When score exceeds 50 the speed of monster increases This will count as level 4
    level=4;
  }
  if (score>70) {
    mSpeed=10; //When score exceeds 70 the speed of monster increases This will count as level 5
    level=5;
  }
  if (score>100) {
    mSpeed=12; //When score exceeds 100 the speed of monster increases This will count as level 6
    level=6;
  }
  if  (score>150) {
    bSpeed = 24; //When score exceeds 150 the speed of monster increases This will count as level this will be level 7 the final level
    level=7;
}
}

public void keyPressed() {
  if (gameScreenNum==0) {  //If on the initial screen when key pressed, start the game
    startGame();
  }
  if (gameOver==1)
  {
    gameOver=0;
    restart();
    gameScreenNum=0;//If the game is over then restart when key pressed
  }
}

public void startGame() {//Start the game
  gameScreenNum=1;
  gameOver = 0;
}
//Monster class which takes from PMonster
class Bomb extends PMonster {
  float explodeX, explodeY;
  float explodeCounter;
  float xt, yt;
  float imgCounter;
  PImage[] bombs = new PImage[4];//array of images for my bomb monster
  PImage[] explosions =new PImage[4];//array of explosions


  public void bombimg() {//Loads array of bomb images
    for (int i = 0; i < 4; i++) {
      bombs[i] = loadImage("bomb" + i + ".png");
    }
  }

  public void display() {//Loops through to animate images
    if (imgCounter < 10) {
      image(bombs[0], x-30, y-20);
    } else if (imgCounter < 20) {
      image(bombs[1], x-30, y-20);
    } else if (imgCounter < 30) {
      image(bombs[2], x-30, y-20);
    } else if (imgCounter < 39) {
      image(bombs[3], x-30, y-20);
    } else {
      image(bombs[3], x-30, y-20);
      imgCounter = 0;
    }
    imgCounter++;
  }

  public void run() {//Displays the bomb and animates
    bombimg();
    display();
  }

  // Resets the position of the monster to a random location
  public void reset() {
    x = random(width);
    y = random(height-100, height);
  }

  //Makes bomb go up and move towards the x and y of the castle
  public void Monstermove(float bSpeed) { //if bomb already in accepted x region
    if (x >= 200 && x <= 600) {//Makes bomb stay within castle width
      if (y>50) {
        {
          // Is the centre close to the target?
          if ( (x-xt)*(x-xt) + (y-yt)*(y-yt) < 1 ) {//This is the more complex ememy movement which makes the spider bomb launch randomly rather than just walk
            yt = y + random( 600, 400 );
          }
          y = yt * 0.05f + y*0.95f ;
        }
        y=y-bSpeed;
      }
    } else if (x < 200) {
      if (y>50) {
        y=y-bSpeed;
      }
      if ( x < 200) {
        x = x+bSpeed;
      }
    } else if (x > 200) {
      if (y>50) {
        y=y-bSpeed;
      }
      if (x > 200) {
        x = x-bSpeed;
      }
    }
    if (y < 55) {
      reset(); //When castle is reached the bomb resets
    }
  }

  public void explosionimg() {//Loads the explosion images
    for (int i = 0; i < 4; i++) {
      explosions[i] = loadImage("explosion" + (i+1) + ".png");
    }
  }

  public void excounting() {//Loops through to animate explosion
    if (explodeCounter!=0) {
      if (explodeCounter < 10) {
        image(explosions[0], explodeX-30, explodeY-15);
      } else if (explodeCounter < 20) {
        image(explosions[1], explodeX-30, explodeY-15);
      } else if (explodeCounter < 30) {
        image(explosions[2], explodeX-30, explodeY-15);
      } else if (explodeCounter < 39) {
        image(explosions[3], explodeX-30, explodeY-15);
      } else {
        image(explosions[3], explodeX-30, explodeY-15);
        explodeCounter = -1;
      }
      explodeCounter++;
    }
  }

  public void collision() {//When collided the bomb respawns and the health goes down
    if (dist(mouseX, mouseY, x, y)<=50) {
      explodeCounter+=1;
      explodeX=x;
      explodeY=y;
      reset();
      health=health-19;
      decreaseHealth();
    }
  }

  public void explosions() {//Makes explosion happen when collided with mouse
    collision();
    explosionimg();
    excounting();
  }
}
// Declare class
class Castle {
  int x;
  int y;
  PImage img;

  public void setup() {//Loads in image of castle
    img = loadImage("castle.PNG");
  }

  public void draw() {//Draws castle image at the location
    image(img, x-200, 0, 400, 50);
  }

  public void run() {//runs the image and resizeing
    setup();
    draw();
  }
}
//Knight class
class Knight {
  int x;
  int y;
  float imgCounter;
  PImage[] knights = new PImage[4];

  public void Kupdate() { // Move the knight towards the mouse
    x = x + (mouseX - x) ;
    y = y + (mouseY - y) ;
  }

  //Animations
  public void knightimg() {//Knight image array called from directory for animation
    for (int i = 0; i < 4; i++) {
      knights[i] = loadImage("Run" + i + ".png");
      knights[i].resize(60, 70);
    }
  }
  public void display() {//Loops through to animate images
    if (imgCounter < 10) {
      image(knights[0], x-30, y-20);
    } else if (imgCounter < 20) {
      image(knights[1], x-30, y-20);
    } else if (imgCounter < 30) {
      image(knights[2], x-30, y-20);
    } else if (imgCounter < 39) {
      image(knights[3], x-30, y-20);
    } else {
      image(knights[3], x-30, y-20);
      imgCounter = 0;
    }
    imgCounter++;
  }

  public void run() {//Animates knight and updates position
    knightimg();
    display();
    Kupdate();
  }
}
//Monster class which takes from PMonster
class Monster extends PMonster {
  PImage[] monsters = new PImage[4];
  float imgCounter;


  public void monsterimg() {//Monster image array called from directory for animation
    for (int i = 0; i < 4; i++) {
      monsters[i] = loadImage("mummy" + i + ".png");
    }
  }

  public void display() { //Animates monster
    if (imgCounter < 10) {
      image(monsters[0], x-25, y-30);//Changed x and y slightly to make the images in line with the circle hitbox that was there
    } else if (imgCounter < 20) {
      image(monsters[1], x-25, y-30);
    } else if (imgCounter < 30) {
      image(monsters[2], x-25, y-30);
    } else if (imgCounter < 39) {
      image(monsters[3], x-25, y-30);
    } else {
      image(monsters[3], x-25, y-30);
      imgCounter = 0;
    }
    imgCounter++;
  }

  public void reset() {   // Resets the position of the monster to a random location
    x = random(width);
    y = random(height-250, height);
  }

  //Makes monsters go up and move towards the x and y of the castle
  public void Monstermove(float mSpeed) {
    if (x >= 200 && x <= 600) { //If monsters already in accepted x region makes it go forward
      if (y>50) {
        y=y-mSpeed;
      }
    } else if (x < 200) {
      if (y>50) {
        y=y-mSpeed;
      }
      if ( x < 200) {
        x = x+mSpeed;
      }
    } else if (x > 200) {
      if (y>50) {
        y=y-mSpeed;
      }
      if (x > 200) {
        x = x-mSpeed;
      }
    }
  }
  public void run() { //Used to call the monster animation
    monsterimg();
    display();
  }
  public void explosions() {//Put explosions here because they have to be called but not used by the monster
  }
}
abstract class PMonster { //This class is for both bomb and monster classes PMonster is a parent class
  float x;//makes x and y preset variables in monster and bomb
  float y;
  public abstract void explosions();//adds explosions
  public abstract void run();//animations
  public void reset() {//respawn
    print("helloni");
  }
  public abstract void Monstermove(float mSpeed);//movements and speed
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "acastlegame3rd" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
